Fold1:
Accuracy: 0.9760
Precision: 0.9917
Recall: 0.9600
F1 Score: 0.9756



Fold2 eğitimi yapılıyor
Fold2 eğitimine 50 epoch ile başlanıyor
Epoch [1/50], Train Loss: 0.1966, Train Acc: 0.9201, Test Loss: 0.1555, Test Acc: 0.9373
Epoch [2/50], Train Loss: 0.0652, Train Acc: 0.9777, Test Loss: 0.1303, Test Acc: 0.9560
Epoch [3/50], Train Loss: 0.0394, Train Acc: 0.9860, Test Loss: 0.1327, Test Acc: 0.9567
Epoch [4/50], Train Loss: 0.0245, Train Acc: 0.9914, Test Loss: 0.1750, Test Acc: 0.9520
Epoch [5/50], Train Loss: 0.0251, Train Acc: 0.9916, Test Loss: 0.1436, Test Acc: 0.9587
Epoch [6/50], Train Loss: 0.0211, Train Acc: 0.9922, Test Loss: 0.2061, Test Acc: 0.9513
Epoch [7/50], Train Loss: 0.0186, Train Acc: 0.9934, Test Loss: 0.1330, Test Acc: 0.9707
Epoch [8/50], Train Loss: 0.0191, Train Acc: 0.9935, Test Loss: 0.1544, Test Acc: 0.9567
Epoch [9/50], Train Loss: 0.0116, Train Acc: 0.9965, Test Loss: 0.1103, Test Acc: 0.9727
Epoch [10/50], Train Loss: 0.0156, Train Acc: 0.9944, Test Loss: 0.1973, Test Acc: 0.9573
Epoch [11/50], Train Loss: 0.0120, Train Acc: 0.9966, Test Loss: 0.1711, Test Acc: 0.9580
Epoch [12/50], Train Loss: 0.0125, Train Acc: 0.9963, Test Loss: 0.1962, Test Acc: 0.9433
Epoch [13/50], Train Loss: 0.0134, Train Acc: 0.9957, Test Loss: 0.1570, Test Acc: 0.9653
Epoch [14/50], Train Loss: 0.0150, Train Acc: 0.9947, Test Loss: 0.1855, Test Acc: 0.9553
Epoch [15/50], Train Loss: 0.0098, Train Acc: 0.9970, Test Loss: 0.1824, Test Acc: 0.9613
Epoch [16/50], Train Loss: 0.0120, Train Acc: 0.9959, Test Loss: 0.1875, Test Acc: 0.9613
Epoch [17/50], Train Loss: 0.0047, Train Acc: 0.9982, Test Loss: 0.1844, Test Acc: 0.9713
Epoch [18/50], Train Loss: 0.0069, Train Acc: 0.9981, Test Loss: 0.2065, Test Acc: 0.9527
Epoch [19/50], Train Loss: 0.0120, Train Acc: 0.9961, Test Loss: 0.1879, Test Acc: 0.9660
Epoch [20/50], Train Loss: 0.0091, Train Acc: 0.9967, Test Loss: 0.2798, Test Acc: 0.9413
Epoch [21/50], Train Loss: 0.0073, Train Acc: 0.9972, Test Loss: 0.3071, Test Acc: 0.9393
Epoch [22/50], Train Loss: 0.0086, Train Acc: 0.9971, Test Loss: 0.2207, Test Acc: 0.9587
Epoch [23/50], Train Loss: 0.0098, Train Acc: 0.9969, Test Loss: 0.1158, Test Acc: 0.9740
Epoch [24/50], Train Loss: 0.0065, Train Acc: 0.9977, Test Loss: 0.1870, Test Acc: 0.9653
Epoch [25/50], Train Loss: 0.0079, Train Acc: 0.9973, Test Loss: 0.2047, Test Acc: 0.9613
Epoch [26/50], Train Loss: 0.0084, Train Acc: 0.9966, Test Loss: 0.1706, Test Acc: 0.9687
Epoch [27/50], Train Loss: 0.0076, Train Acc: 0.9973, Test Loss: 0.1356, Test Acc: 0.9633
Epoch [28/50], Train Loss: 0.0057, Train Acc: 0.9987, Test Loss: 0.2127, Test Acc: 0.9513
Epoch [29/50], Train Loss: 0.0093, Train Acc: 0.9966, Test Loss: 0.1723, Test Acc: 0.9600
Epoch [30/50], Train Loss: 0.0078, Train Acc: 0.9974, Test Loss: 0.1715, Test Acc: 0.9680
Epoch [31/50], Train Loss: 0.0056, Train Acc: 0.9980, Test Loss: 0.2568, Test Acc: 0.9473
Epoch [32/50], Train Loss: 0.0077, Train Acc: 0.9971, Test Loss: 0.3119, Test Acc: 0.9393
Epoch [33/50], Train Loss: 0.0033, Train Acc: 0.9988, Test Loss: 0.2310, Test Acc: 0.9627
Epoch [34/50], Train Loss: 0.0037, Train Acc: 0.9989, Test Loss: 0.2520, Test Acc: 0.9533
Epoch [35/50], Train Loss: 0.0053, Train Acc: 0.9983, Test Loss: 0.2379, Test Acc: 0.9613
Epoch [36/50], Train Loss: 0.0074, Train Acc: 0.9974, Test Loss: 0.2001, Test Acc: 0.9600
Epoch [37/50], Train Loss: 0.0021, Train Acc: 0.9991, Test Loss: 0.4566, Test Acc: 0.9320
Epoch [38/50], Train Loss: 0.0067, Train Acc: 0.9981, Test Loss: 0.1655, Test Acc: 0.9680
Epoch [39/50], Train Loss: 0.0011, Train Acc: 0.9996, Test Loss: 0.3250, Test Acc: 0.9453
Epoch [40/50], Train Loss: 0.0064, Train Acc: 0.9981, Test Loss: 0.2679, Test Acc: 0.9593
Epoch [41/50], Train Loss: 0.0075, Train Acc: 0.9975, Test Loss: 0.1795, Test Acc: 0.9647
Epoch [42/50], Train Loss: 0.0043, Train Acc: 0.9984, Test Loss: 0.1788, Test Acc: 0.9680
Epoch [43/50], Train Loss: 0.0051, Train Acc: 0.9981, Test Loss: 0.2894, Test Acc: 0.9607
Epoch [44/50], Train Loss: 0.0030, Train Acc: 0.9991, Test Loss: 0.3063, Test Acc: 0.9587
Epoch [45/50], Train Loss: 0.0069, Train Acc: 0.9979, Test Loss: 0.2017, Test Acc: 0.9607
Epoch [46/50], Train Loss: 0.0022, Train Acc: 0.9993, Test Loss: 0.2490, Test Acc: 0.9627
Epoch [47/50], Train Loss: 0.0049, Train Acc: 0.9984, Test Loss: 0.2460, Test Acc: 0.9633
Epoch [48/50], Train Loss: 0.0060, Train Acc: 0.9983, Test Loss: 0.3463, Test Acc: 0.9393
Epoch [49/50], Train Loss: 0.0037, Train Acc: 0.9991, Test Loss: 0.2530, Test Acc: 0.9620
Epoch [50/50], Train Loss: 0.0047, Train Acc: 0.9985, Test Loss: 0.2717, Test Acc: 0.9513
Fold2 değerlendirmesi yapılıyor
<ipython-input-5-4f7556d52106>:203: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f'/content/drive/MyDrive/Teknofest_Braincoders/densenet_best_model_{fold}.pth'))
Accuracy: 0.9740
Precision: 0.9811
Recall: 0.9667
F1 Score: 0.9738





Fold3 eğitimi yapılıyor
/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=DenseNet121_Weights.IMAGENET1K_V1`. You can also use `weights=DenseNet121_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Fold3 eğitimine 50 epoch ile başlanıyor
Epoch [1/50], Train Loss: 0.2075, Train Acc: 0.9177, Test Loss: 0.1359, Test Acc: 0.9507
Epoch [2/50], Train Loss: 0.0672, Train Acc: 0.9749, Test Loss: 0.1972, Test Acc: 0.9347
Epoch [3/50], Train Loss: 0.0339, Train Acc: 0.9879, Test Loss: 0.2766, Test Acc: 0.9340
Epoch [4/50], Train Loss: 0.0308, Train Acc: 0.9899, Test Loss: 0.1097, Test Acc: 0.9700
Epoch [5/50], Train Loss: 0.0261, Train Acc: 0.9911, Test Loss: 0.1608, Test Acc: 0.9633
Epoch [6/50], Train Loss: 0.0277, Train Acc: 0.9907, Test Loss: 0.1559, Test Acc: 0.9607
Epoch [7/50], Train Loss: 0.0183, Train Acc: 0.9938, Test Loss: 0.1770, Test Acc: 0.9573
Epoch [8/50], Train Loss: 0.0122, Train Acc: 0.9959, Test Loss: 0.1975, Test Acc: 0.9440
Epoch [9/50], Train Loss: 0.0153, Train Acc: 0.9952, Test Loss: 0.2164, Test Acc: 0.9547
Epoch [10/50], Train Loss: 0.0110, Train Acc: 0.9965, Test Loss: 0.2081, Test Acc: 0.9540
Epoch [11/50], Train Loss: 0.0140, Train Acc: 0.9952, Test Loss: 0.1746, Test Acc: 0.9687
Epoch [12/50], Train Loss: 0.0160, Train Acc: 0.9944, Test Loss: 0.3011, Test Acc: 0.9420
Epoch [13/50], Train Loss: 0.0132, Train Acc: 0.9958, Test Loss: 0.1628, Test Acc: 0.9593
Epoch [14/50], Train Loss: 0.0095, Train Acc: 0.9969, Test Loss: 0.2462, Test Acc: 0.9460
Epoch [15/50], Train Loss: 0.0075, Train Acc: 0.9977, Test Loss: 0.2483, Test Acc: 0.9433
Epoch [16/50], Train Loss: 0.0126, Train Acc: 0.9953, Test Loss: 0.2114, Test Acc: 0.9613
Epoch [17/50], Train Loss: 0.0093, Train Acc: 0.9962, Test Loss: 0.1937, Test Acc: 0.9660
Epoch [18/50], Train Loss: 0.0076, Train Acc: 0.9971, Test Loss: 0.1871, Test Acc: 0.9673
Epoch [19/50], Train Loss: 0.0106, Train Acc: 0.9966, Test Loss: 0.2151, Test Acc: 0.9527
Epoch [20/50], Train Loss: 0.0045, Train Acc: 0.9984, Test Loss: 0.2873, Test Acc: 0.9573
Epoch [21/50], Train Loss: 0.0011, Train Acc: 0.9997, Test Loss: 0.4004, Test Acc: 0.9493
Epoch [22/50], Train Loss: 0.0169, Train Acc: 0.9942, Test Loss: 0.1777, Test Acc: 0.9673
Epoch [23/50], Train Loss: 0.0069, Train Acc: 0.9979, Test Loss: 0.2569, Test Acc: 0.9640
Epoch [24/50], Train Loss: 0.0085, Train Acc: 0.9973, Test Loss: 0.1900, Test Acc: 0.9647
Epoch [25/50], Train Loss: 0.0105, Train Acc: 0.9965, Test Loss: 0.1478, Test Acc: 0.9653
Epoch [26/50], Train Loss: 0.0064, Train Acc: 0.9978, Test Loss: 0.1459, Test Acc: 0.9700
Epoch [27/50], Train Loss: 0.0093, Train Acc: 0.9968, Test Loss: 0.1945, Test Acc: 0.9580
Epoch [28/50], Train Loss: 0.0082, Train Acc: 0.9969, Test Loss: 0.1700, Test Acc: 0.9633
Epoch [29/50], Train Loss: 0.0012, Train Acc: 0.9998, Test Loss: 0.2010, Test Acc: 0.9727
Epoch [30/50], Train Loss: 0.0001, Train Acc: 1.0000, Test Loss: 0.2289, Test Acc: 0.9693
Epoch [31/50], Train Loss: 0.0000, Train Acc: 1.0000, Test Loss: 0.2473, Test Acc: 0.9707
Epoch [32/50], Train Loss: 0.0000, Train Acc: 1.0000, Test Loss: 0.2837, Test Acc: 0.9653
Epoch [33/50], Train Loss: 0.0000, Train Acc: 1.0000, Test Loss: 0.2815, Test Acc: 0.9660
Epoch [34/50], Train Loss: 0.0000, Train Acc: 1.0000, Test Loss: 0.3188, Test Acc: 0.9620
Epoch [35/50], Train Loss: 0.0306, Train Acc: 0.9901, Test Loss: 0.3517, Test Acc: 0.9373
Epoch [36/50], Train Loss: 0.0082, Train Acc: 0.9973, Test Loss: 0.2097, Test Acc: 0.9567
Epoch [37/50], Train Loss: 0.0040, Train Acc: 0.9989, Test Loss: 0.2198, Test Acc: 0.9660
Epoch [38/50], Train Loss: 0.0092, Train Acc: 0.9971, Test Loss: 0.1792, Test Acc: 0.9673
Epoch [39/50], Train Loss: 0.0057, Train Acc: 0.9981, Test Loss: 0.1945, Test Acc: 0.9573
Epoch [40/50], Train Loss: 0.0056, Train Acc: 0.9982, Test Loss: 0.2432, Test Acc: 0.9560
Epoch [41/50], Train Loss: 0.0067, Train Acc: 0.9983, Test Loss: 0.2688, Test Acc: 0.9520
Epoch [42/50], Train Loss: 0.0058, Train Acc: 0.9979, Test Loss: 0.2819, Test Acc: 0.9540
Epoch [43/50], Train Loss: 0.0020, Train Acc: 0.9995, Test Loss: 0.2743, Test Acc: 0.9593
Epoch [44/50], Train Loss: 0.0031, Train Acc: 0.9986, Test Loss: 0.2807, Test Acc: 0.9413
Epoch [45/50], Train Loss: 0.0090, Train Acc: 0.9969, Test Loss: 0.2046, Test Acc: 0.9613
Epoch [46/50], Train Loss: 0.0021, Train Acc: 0.9993, Test Loss: 0.1961, Test Acc: 0.9667
Epoch [47/50], Train Loss: 0.0097, Train Acc: 0.9971, Test Loss: 0.1358, Test Acc: 0.9600
Epoch [48/50], Train Loss: 0.0022, Train Acc: 0.9995, Test Loss: 0.1858, Test Acc: 0.9700
Epoch [49/50], Train Loss: 0.0066, Train Acc: 0.9977, Test Loss: 0.2191, Test Acc: 0.9560
Epoch [50/50], Train Loss: 0.0013, Train Acc: 0.9997, Test Loss: 0.2100, Test Acc: 0.9687
Fold3 değerlendirmesi yapılıyor
<ipython-input-5-4f7556d52106>:203: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f'/content/drive/MyDrive/Teknofest_Braincoders/densenet_best_model_{fold}.pth'))
Accuracy: 0.9727
Precision: 0.9986
Recall: 0.9467
F1 Score: 0.9719
